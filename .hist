;; -*- coding: utf-8-unix -*-
;; Automatically written history of nREPL session
;; Edit at your own risk

("(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(doseq [x (range 10) y (range 20)] (println (+ x y)))" "(doseq [x (range 10) y (range 20)] (+ x y))" "(-main)" "(use 'graphchi-clojure.core :reload)" "(apply min 1 [] [])" "(apply min 1 [])" "(min 1)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(map not= [1 2 3] [1 2 3])" "(map = [1 2 3] [1 2 3])" "(apply min 1 [14 15 -4])" "(apply min 1 [14 15])" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(.count *2)" "(.id *1)" "(first *1)" "(seq *1)" "(-main)" "(iterator-seq *1)" "(cast java.lang.Iterable *1)" "(-main)" "(supers (class *1))" "(-main)" "(supers (class *1))" "(use 'graphchi-clojure.core :reload)" "(-main)" "(supers (class *1))" "(use 'graphchi-clojure.core :reload)" "(supers (class *1))" "(-main)" "(supers *1)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(class *1)" "(-main)" "(iterator-seq *2)" "(class *1)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(use 'graphchi-clojure.core)" "(run \"../facebook/0.edges\" 2 create-program 1)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 create-program 1)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 create-program 1)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 create-program 1)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 create-program 1)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 (create-program identity) 1)" "(page-rank *1 3)" "(page-rank *1 2)" "(page-rank *1 1)" "(page-rank {:in-edges [1 1 1 1] :out-edges [2 2 2 2] :value 22} 1)" "(page-rank {:in-edges [1 1 1 1] :out-edges [2 2 2 2] :value 22} 0)" "(page-rank {:in-edges [1 1 1 1] :out-edges [2 2 2 2] :value 22})" "({ page-rank {:in-edges [1 2 3 4] :out-edge}})" "(use 'graphchi-clojure.core :reload)" "(page-rank {:in-edges })" "(use 'graphchi-clojure.core :reload)" "(dir 100 411)" "(quot 100 411)" "(/ 10. 56)" "(/ 10 56)" "(/ 10 2)" "(repeat 2 5)" "(repeat 2 2)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(doc reify)" "(reify foo Counted (count [_ ] 22 ))" "(reify foo Countable (count [_ ] 22 ))" "(reify foo Countable (count [_ ]22))" "(def foo {:foo 1})" "(-main 1000) " "(-main 100) " "(use 'graphchi-clojure.core :reload)" "(-main 100) " "(-main 10) " "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(time (-main))" "(use 'graphchi-clojure.core :reload)" "22_100" "[111111,,,,,,,,,,,,,,,,,,,,,,,,,,3]" "[1111111,,,,,,,,,,333333]" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(-main)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 (create-program identity) 1)" "(use 'graphchi-clojure.core :reload)" "(doc spit)" "(run \"../facebook/0.edges\" 2 (create-program identity) 1)" "(run \"../facebook/aaaa.edges\" 2 (create-program identity) 1)" "(run \"../facebook/0.edges\" 2 (create-program identity) 1)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 (create-program identity) 1)" "(create-program :foo)" "(run \"../facebook/0.edges\" 2 (create-program identity) 1)" "(run \"../facebook/0.edges\" 2 (create-program identity) 40)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 (create-program identity) 40)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 (create-program identity) 40)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 (create-program identity) 40)" "(update *1)" "(create-program identity)" "(.update *1)" "(create-program identity)" "(run \"../facebook/0.edges\" 2 (create-program identity) 40)" "(run \"../facebook/0.edges\" 2 (create-program identity) 12)" "(run \"../facebook/0.edges\" 2 (create-program identity) 1)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 (create-program identity) 1)" "(use 'graphchi-clojure.core :reload)" "(proxy [Object] [] (toString [] \"hello\"))" "(proxy [Object] [])" "(proxy [Object])" "(proxy Object)" "(doc proxy)" "(proxy)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 (create-program identity) 1)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 (create-program identity) 1)" "(use 'graphchi-clojure.core :reload)" "(run \"../facebook/0.edges\" 2 (create-program identity) 1)" "(run \"../facebook/0.edges\" (create-program identity) 1)" "(use 'graphchi-clojure.core :reload)" "(create-program identity)" "(use 'graphchi-clojure.core :reload)" "(create-program)" "(use 'graphchi-clojure.core)")